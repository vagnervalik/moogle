@page "/"
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions
<PageTitle>Moogle!</PageTitle>

<h1>🔍 Moogle!</h1>

<input class="p-1 my-4" @bind="query" placeholder="Introduzca su búsqueda">  

<button type="default" class="btn btn-primary" @onclick="RunQuery">🔍 Buscar</button>



@if (!string.IsNullOrEmpty(result.Suggestion)) {
    <div class="suggestion" >
        <p>Resultados para: <strong>@moogle.M.GetSuggestion(query)</strong>?</p>
        <p>¿Desea buscar <strong><a href="" runat="server" OnServerClick="RunOriginal">@query</a></strong> en su lugar?</p>
    </div>
}


<ul class="results">
@foreach (var item in result.Items()) {
    <li>
        <div class="item">
            <p class="title"><a href="file:///moogle\Content\@(item.Title)">@item.Title</a></p>
            <p>...  @{
                    string snip = item.Snippet;
                    var words = Regex.Split(item.Snippet.ToLower(), "[^a-zA-Z]+").Where(x => !string.IsNullOrEmpty(x)).ToArray();
                    bool isMatch = false;
                    int pos = 0;
                    while(true){
                        var x = moogle.M.GetMin(snip, item.Matches, pos);
                        if(x.pos == -1) break;
                        @(snip.Substring(pos, x.pos - pos)) 
                        <span class="highlight">@x.word</span>
                        pos = x.pos + x.word.Length;
                    }
                }
             ... </p>
        </div>
    </li>
}
</ul>

@code {
    private string query = "";
    private SearchResult result = new SearchResult();
    private Moogle moogle;
    protected override void OnInitialized(){
        moogle = new Moogle(@"..\Content");
        ShowAlert();
    }
    private void ShowAlert(){
    JSRuntime.InvokeVoidAsync("alert", "Database loaded!");
    }
    private void RunOriginal(){
        result = moogle.Query(query);
    }
    private void RunQuery() {
        result = moogle.Query(moogle.M.GetSuggestion(query));
    }
}
